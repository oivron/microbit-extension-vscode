"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveFilesUp = exports.rmdirRecursive = exports.isDir = exports.exist = void 0;
var fs = require("fs");
var path = require("path");
exports.exist = function (file) { return __awaiter(void 0, void 0, void 0, function () {
    var _1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, fs.promises.lstat(file)];
            case 1:
                _a.sent();
                return [2 /*return*/, true];
            case 2:
                _1 = _a.sent();
                return [2 /*return*/, false];
            case 3: return [2 /*return*/];
        }
    });
}); };
exports.isDir = function (file) { return __awaiter(void 0, void 0, void 0, function () {
    var _2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, fs.promises.lstat(file)];
            case 1: return [2 /*return*/, (_a.sent()).isDirectory()];
            case 2:
                _2 = _a.sent();
                return [2 /*return*/, false];
            case 3: return [2 /*return*/];
        }
    });
}); };
exports.rmdirRecursive = function (dir) { return __awaiter(void 0, void 0, void 0, function () {
    var files, _i, files_1, file, currPath;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.exist(dir)];
            case 1:
                if (!_a.sent()) return [3 /*break*/, 11];
                return [4 /*yield*/, fs.promises.readdir(dir)];
            case 2:
                files = _a.sent();
                _i = 0, files_1 = files;
                _a.label = 3;
            case 3:
                if (!(_i < files_1.length)) return [3 /*break*/, 9];
                file = files_1[_i];
                currPath = path.join(dir, file);
                return [4 /*yield*/, fs.promises.lstat(currPath)];
            case 4:
                if (!(_a.sent()).isDirectory()) return [3 /*break*/, 6];
                return [4 /*yield*/, exports.rmdirRecursive(currPath)];
            case 5:
                _a.sent();
                return [3 /*break*/, 8];
            case 6: return [4 /*yield*/, fs.promises.unlink(currPath)];
            case 7:
                _a.sent();
                _a.label = 8;
            case 8:
                _i++;
                return [3 /*break*/, 3];
            case 9: return [4 /*yield*/, fs.promises.rmdir(dir)];
            case 10:
                _a.sent();
                _a.label = 11;
            case 11: return [2 /*return*/];
        }
    });
}); };
exports.moveFilesUp = function (dir) { return __awaiter(void 0, void 0, void 0, function () {
    var files, mostRecentDir, _i, files_2, file, stats, filesToMove, _a, filesToMove_1, fileToMove, fullPathToMove, newPath;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, fs.promises.readdir(dir)];
            case 1:
                files = _b.sent();
                mostRecentDir = {
                    path: '',
                    mtime: 0
                };
                _i = 0, files_2 = files;
                _b.label = 2;
            case 2:
                if (!(_i < files_2.length)) return [3 /*break*/, 5];
                file = files_2[_i];
                return [4 /*yield*/, fs.promises.stat(path.join(dir, file))];
            case 3:
                stats = _b.sent();
                if (stats.isDirectory() && stats.mtime.getTime() > mostRecentDir.mtime) {
                    mostRecentDir.path = path.join(dir, file);
                    mostRecentDir.mtime = stats.mtime.getTime();
                }
                _b.label = 4;
            case 4:
                _i++;
                return [3 /*break*/, 2];
            case 5: return [4 /*yield*/, fs.promises.readdir(mostRecentDir.path)];
            case 6:
                filesToMove = _b.sent();
                _a = 0, filesToMove_1 = filesToMove;
                _b.label = 7;
            case 7:
                if (!(_a < filesToMove_1.length)) return [3 /*break*/, 12];
                fileToMove = filesToMove_1[_a];
                fullPathToMove = path.join(mostRecentDir.path, fileToMove);
                newPath = path.join(path.join(fullPathToMove, '..', '..'), fileToMove);
                return [4 /*yield*/, exports.isDir(newPath)];
            case 8:
                if (!_b.sent()) return [3 /*break*/, 10];
                return [4 /*yield*/, exports.rmdirRecursive(newPath)];
            case 9:
                _b.sent();
                _b.label = 10;
            case 10:
                fs.promises.rename(fullPathToMove, newPath);
                _b.label = 11;
            case 11:
                _a++;
                return [3 /*break*/, 7];
            case 12: 
            // removes the empty folder
            return [4 /*yield*/, exports.rmdirRecursive(mostRecentDir.path)];
            case 13:
                // removes the empty folder
                _b.sent();
                return [2 /*return*/];
        }
    });
}); };
