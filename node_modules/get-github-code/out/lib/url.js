"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildUrl = void 0;
var axios_1 = require("axios");
var error_1 = require("./error");
/**
 * Builds the URL that will be used to download the source code.
 *
 * @param {string} [url] - The url of the GitHub repository (add #<branch> at the end to specify the branch).
 * @param {DownloadOptions} [options] - The options for the download command.
 * @returns {Promise<string>} Returns a valid URL.
 */
exports.buildUrl = function (url, options) { return __awaiter(void 0, void 0, void 0, function () {
    var modifiedUrl, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, buildWithString(url)];
            case 1:
                _a = (_b.sent());
                if (_a) return [3 /*break*/, 3];
                return [4 /*yield*/, buildWithOptions(options)];
            case 2:
                _a = (_b.sent());
                _b.label = 3;
            case 3:
                modifiedUrl = _a;
                if (!isValid(modifiedUrl))
                    throw new Error("the URL was modified to '" + modifiedUrl + "', but it is not valid.");
                return [2 /*return*/, modifiedUrl];
        }
    });
}); };
var buildWithString = function (url) { return __awaiter(void 0, void 0, void 0, function () {
    var branch, _a;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (!url) {
                    return [2 /*return*/, ''];
                }
                url = url.toLowerCase();
                if (!url.includes('github.com')) {
                    throw new Error("invalid URL. The given URL '" + url + "' doesn't have the github.com domain.");
                }
                url = url.replace('http://', 'https://');
                url = url.replace('git@github.com:', 'https://github.com/');
                if (url.startsWith('github.com')) {
                    url = url.replace('github.com', 'https://github.com');
                }
                url = url.replace('https://github.com', 'https://codeload.github.com');
                _b = url.split('#'), url = _b[0], branch = _b[1];
                _a = branch;
                if (_a) return [3 /*break*/, 2];
                return [4 /*yield*/, getDefaultBranch(url)];
            case 1:
                _a = (_c.sent());
                _c.label = 2;
            case 2:
                branch = _a;
                if (url.endsWith('.git')) {
                    url = url.slice(0, -4);
                }
                return [2 /*return*/, url + "/zip/" + branch];
        }
    });
}); };
var buildWithOptions = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var url, branch, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!options) {
                    throw new Error('invalid input parameters. You need to inform the URL with a string or using the options object.');
                }
                if (!options.username) {
                    throw new Error('invalid username.');
                }
                if (!options.repo) {
                    throw new Error('invalid repository.');
                }
                url = "https://codeload.github.com/" + options.username + "/" + options.repo;
                _a = options.branch;
                if (_a) return [3 /*break*/, 2];
                return [4 /*yield*/, getDefaultBranch(url)];
            case 1:
                _a = (_b.sent());
                _b.label = 2;
            case 2:
                branch = _a;
                return [2 /*return*/, url + "/zip/" + branch];
        }
    });
}); };
var getDefaultBranch = function (url) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, response, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                url = url.replace('://codeload.github.com', '://api.github.com/repos');
                headers = {
                    Accept: 'application/vnd.github.v3+json'
                };
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, axios_1.default.get(url, { headers: headers })];
            case 2:
                response = _a.sent();
                return [2 /*return*/, response.data.default_branch];
            case 3:
                err_1 = _a.sent();
                error_1.addErrMsg(err_1, 'error trying to get the default branch. Try again passing the branch name in this format: https://github.com/<user>/<repo>#<branch>');
                throw err_1;
            case 4: return [2 /*return*/];
        }
    });
}); };
var isValid = function (url) {
    // This regex "[^/]*" means "any character, except slash"
    var regex = new RegExp('https://codeload\\.github\\.com/[^/]*/[^/]*/zip/[^/]*');
    return regex.test(url);
};
